[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computational Tools for Bioengineers 2025",
    "section": "",
    "text": "The goal of this 1 credit course is to provide graduate students in bioengineering and biosciences with foundational understanding of modern computational tools to aid in their research. The target audience is graduate students who have little or no experience with computational tools, or who would like a refresher and exposure to a broad quiver of resources."
  },
  {
    "objectID": "Lectures.html",
    "href": "Lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Lecture_1\nLecture_2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to the website for BioE610 - Computational Tools for Bioengineers.\nBelow you will find the core information for the course.\nMore detailed information can be found under the ‘Syllabus’ and ‘Policies’ links.\nThe course schedule can be found under the ‘Schedule’ header.\nI will be posting the lectures after each class under the ‘Lectures’ header."
  },
  {
    "objectID": "about.html#instructor-information",
    "href": "about.html#instructor-information",
    "title": "About",
    "section": "Instructor information",
    "text": "Instructor information\n\n\n\nInstructor\nBill Cresko\n\n\nOffices\nM306 KC East Tower & Pacific 312\n\n\ne-mail\nwcresko@uoregon.edu"
  },
  {
    "objectID": "about.html#class-information",
    "href": "about.html#class-information",
    "title": "About",
    "section": "Class information",
    "text": "Class information\n\n\n\nClass times\nMonday 2:30 to 3:50\n\n\nClass room\nKC106\n\n\nOffice Hours\nTuesday 3:00 to 4:00\n\n\nOffice hour location\nKC Connector"
  },
  {
    "objectID": "about.html#online-course-resources",
    "href": "about.html#online-course-resources",
    "title": "About",
    "section": "Online Course Resources",
    "text": "Online Course Resources\n\nWe will be using Canvas as well as this GitHub Pages website (https://wcresko.github.io/BioE_Comp_Tools/).\nTo access our course Canvas site, log into canvas.uoregon.edu using your DuckID.\nIf you have questions about using Canvas, visit the Canvas support page.\nCanvas and Technology Support also is available by phone (541-346-4357) or by live chat."
  },
  {
    "objectID": "about.html#technical-requirements",
    "href": "about.html#technical-requirements",
    "title": "About",
    "section": "Technical Requirements",
    "text": "Technical Requirements\n\nYou will be working on your own laptop computer.\nIf you would like to borrow a laptop let me know.\nIf you are working on Windows you need to install WSL2 via PowerShell (see Software page)\nLatest version of R (install here).\nLatest version of RStudio (install here).\nA terminal that allows ssh connection to the UO computing cluster (Talapas)."
  },
  {
    "objectID": "Schedule.html",
    "href": "Schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "I’ll soon have material in an online textbook for you\n\n\n\n\nBioinformatics Data Skills. 2015. Holmes and Huber. O’Reilly.\n\n\n\n\n\nYou will be working on your own laptop computer\nA Terminal application (see ‘Software’ Tab for installation)\nLatest version of R (install here)\nLatest version of RStudio (install here)\nA terminal that allows ssh connection to the UO computing cluster (Talapas)\nGit installed and a GitHub account\nLaTeX installed on your computer"
  },
  {
    "objectID": "Schedule.html#reading-materials-and-tools",
    "href": "Schedule.html#reading-materials-and-tools",
    "title": "Schedule",
    "section": "",
    "text": "I’ll soon have material in an online textbook for you\n\n\n\n\nBioinformatics Data Skills. 2015. Holmes and Huber. O’Reilly.\n\n\n\n\n\nYou will be working on your own laptop computer\nA Terminal application (see ‘Software’ Tab for installation)\nLatest version of R (install here)\nLatest version of RStudio (install here)\nA terminal that allows ssh connection to the UO computing cluster (Talapas)\nGit installed and a GitHub account\nLaTeX installed on your computer"
  },
  {
    "objectID": "Schedule.html#course-schedule",
    "href": "Schedule.html#course-schedule",
    "title": "Schedule",
    "section": "Course schedule",
    "text": "Course schedule\n\n\n\n\n\n\n\n\n\nWeek\nDates\nTopics\nAssignments\n\n\n\n\n1\nOct 20\n\nComputers and Shells - 1\n\nFundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages.\nUnix paths\nUnix shell commands\n\n\n\n\n\n2\nOct 27\n\nComputers and Shells - 2\n\nAdvanced Unix shell commands including GREP, AWK and SED\nUnix data flows and pipes\nBasics of data structures, databases and tidy data\nProperly organized and formatted primary data and metadata files for analysis\n\n\n\n\n\n3\nNov 3\n\nFoundations of scripting using Python and R - 1\n\nR and Python fundamentals\nIntegrative developer environments (IDEs)\npackages and extending functionality\nobjects and object oriented programming\n\n\n\n\n\n4\nNov 10\n\nFoundations of scripting using Python and R - 2\n\nfunctions, iteration, and simulation\ndata wrangling\ncreating figures\nUse and misuse of Generative AI as a digital assistant\n‘vibe coding’\n\n\nHW1 Due\n\n\n5\nNov 17\n\nReproducible science\n\nthe NIH FAIR (Findable, accessible, interoperable) principles\nGit and GitHub for project management and collaboration\nMarkdown for use in manuscripts, presentations and websites\nIncluding LaTeX mathematical expressions in markdown\n\n\n\n\n\n6\nNov 24\n\nRemote super computing - 1\n\nUtilize the UO’s supercomputer cluster, Talapas, for computationally intensive tasks.\n\n\nHW2 Due\n\n\n7\nDec 1\n\nRemote super computing - 2\n\nSlurm scripts for big jobs\nOther remote systems such as AWS Azure\n\n\n\n\n\n\nDec 8\nFINALS WEEK\nProject Due"
  },
  {
    "objectID": "Homework_Folder/Term_Project.html",
    "href": "Homework_Folder/Term_Project.html",
    "title": "Term Long Project - Pulling it All Together",
    "section": "",
    "text": "Assignment:\nTBD\nDue: Submit your work via Canvas by the end of the day (midnight) on Friday, December 12th."
  },
  {
    "objectID": "Homework_Folder/Term_Project.html#directions",
    "href": "Homework_Folder/Term_Project.html#directions",
    "title": "Term Long Project - Pulling it All Together",
    "section": "",
    "text": "Assignment:\nTBD\nDue: Submit your work via Canvas by the end of the day (midnight) on Friday, December 12th."
  },
  {
    "objectID": "Homework_Folder/HW1_2025.html",
    "href": "Homework_Folder/HW1_2025.html",
    "title": "Homework 1 - TBD",
    "section": "",
    "text": "Assignment: TBD\nDue: Submit your work via Canvas by the end of the day (midnight) on Monday, November 10th.\nDirections: TBD"
  },
  {
    "objectID": "Homework_Folder/HW1_2025.html#problem-set-1---directions",
    "href": "Homework_Folder/HW1_2025.html#problem-set-1---directions",
    "title": "Homework 1 - TBD",
    "section": "",
    "text": "Assignment: TBD\nDue: Submit your work via Canvas by the end of the day (midnight) on Monday, November 10th.\nDirections: TBD"
  },
  {
    "objectID": "Software.html",
    "href": "Software.html",
    "title": "Software",
    "section": "",
    "text": "Latest version of R\nLatest version of RStudio\nA terminal that allows ssh connection to the UO computing cluster (Talapas)\nGit installed and a GitHub account for version control and collaboration\nLaTeX installed on your computer for mathematical typesetting"
  },
  {
    "objectID": "Software.html#software-tools-to-install",
    "href": "Software.html#software-tools-to-install",
    "title": "Software",
    "section": "",
    "text": "Latest version of R\nLatest version of RStudio\nA terminal that allows ssh connection to the UO computing cluster (Talapas)\nGit installed and a GitHub account for version control and collaboration\nLaTeX installed on your computer for mathematical typesetting"
  },
  {
    "objectID": "Software.html#r-and-rstudio",
    "href": "Software.html#r-and-rstudio",
    "title": "Software",
    "section": "R and RStudio",
    "text": "R and RStudio\n\nLatest version of R (install here)\nLatest version of RStudio (install here)"
  },
  {
    "objectID": "Software.html#accessing-the-shell-via-a-terminal-application",
    "href": "Software.html#accessing-the-shell-via-a-terminal-application",
    "title": "Software",
    "section": "Accessing the shell via a terminal application",
    "text": "Accessing the shell via a terminal application\n\nMac or Linux users\n\nopen the native “Terminal” app on Mac or Linux\ninstall another terminal like “iTerm2”\n\n\n\nWindows users\n\nGuide: https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview\nRun Windows PowerShell as administrator\nInstall WSL2 by typing wsl --install\nRestart your computer\nSearch for and install Ubuntu from Microsoft store app\nOR type wsl --install -d ubuntu on PowerShell to do both at once\n\n\n\nAccessing the shell on Windows\n\nOpen Ubuntu and set up a username and password\nDoes not have to match your login info for Windows\nRun sudo apt update then sudo apt upgrade to ensure everything is up to date\nWill need to create folders and files within your Ubuntu folder on your computer"
  },
  {
    "objectID": "Software.html#git-and-github",
    "href": "Software.html#git-and-github",
    "title": "Software",
    "section": "Git and GitHub",
    "text": "Git and GitHub\n\nLastest version of Git (install here)\nA GitHub account (information here)"
  },
  {
    "objectID": "Software.html#latex",
    "href": "Software.html#latex",
    "title": "Software",
    "section": "LaTeX",
    "text": "LaTeX\n\nLastest version of LaTeX (install here)"
  },
  {
    "objectID": "Homework.html",
    "href": "Homework.html",
    "title": "Homeworks",
    "section": "",
    "text": "Below you can find links to the homework directions as they become available. You will be able to submit your homework via the Canvas website.\nHomework 1\nHomework 2\nTerm Project"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "",
    "text": "Deeper dive into Unix tools\nReading and writing files\nTidy data\nAdvanced Unix tools to manipulate large files"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#goals-for-today",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#goals-for-today",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Goals for today",
    "text": "Goals for today\n\nDeeper dive into Unix tools\nReading and writing files\nTidy data\nAdvanced Unix tools to manipulate large files"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#what-is-unix",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#what-is-unix",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "What is Unix?",
    "text": "What is Unix?\n\nA scripting language developed in 1969, released in 1973\nServes as the base language for many programs and computers\nRuns both locally on your computer and on large clusters like Talapas\nLinux is an open-source version of the same language"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#what-is-a-shell",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#what-is-a-shell",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "What is a shell?",
    "text": "What is a shell?\n\nThe ‘shell’ is a program that runs UNIX and takes in commands and gives them to the operating system\nBash acts as the shell in macs, linux, and now windows\nYou can access the shell via a terminal window"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#recipes-for-a-shell-command",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#recipes-for-a-shell-command",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Recipes for a shell command",
    "text": "Recipes for a shell command\n\nPrompt: notation used to indicate your computer is ready to accept a new command\nCommand: the building blocks of programming, tell computer to do a specific task\nOptions: change the behavior of a command\nArgument: what the command should operate on"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#why-use-the-shell",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#why-use-the-shell",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Why use the shell?",
    "text": "Why use the shell?\n\nSpeed\nCan handle extremely large file sizes\nUse programs only available via shell\nThe commands work almost identically across platforms\nYou can even use them on a large computer cluster like Talapas and AWS\nIt is incredibly powerful particularly for repeated actions\nIt allows you to do thousands of ‘clicks’ with single commands"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#where-do-you-get-help",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#where-do-you-get-help",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Where do you get help?",
    "text": "Where do you get help?\n\nManual pages!\n\nThe shell has manuals for all basic commands\nType man [command_name] to access the manual for a specific command\nType q to exit\n\nAlso…the internet!\nAlso… Generative AI (ChaptGPT, Claude, etc..)"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#the-way-you-normally-navigate",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#the-way-you-normally-navigate",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "The way you normally navigate",
    "text": "The way you normally navigate"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#how-is-a-computer-organized",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#how-is-a-computer-organized",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "How is a computer organized?",
    "text": "How is a computer organized?\n\nSystem of directories (folders) and files\n/ = the root directory, which holds all other directories\nMost of your files will be located under /Users in a directory of your username\nthe ~ is shorthand for your home folder\nNavigation in the shell consists of jumping up and down between directories and seeing what’s in them\nThe “path” refers to the location a file is in\n\nex: “/Users/wcresko/Documents”"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#common-navigation-commands-1",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#common-navigation-commands-1",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Common navigation commands",
    "text": "Common navigation commands\n\npwd = “print working directory”, which will print where you currently are in the system\nls = “list”, list all directories and files in your current position\n\nls –F = denote which results are directories, files, etc.\nls –l = ”long format”, lists total file sizes\nls –r = “reverse”, lists the results in reverse order\nls –S = “size”, sort results by size\nls –t = “time”, sort results by time created, from most recent to last"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#common-navigation-commands-2",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#common-navigation-commands-2",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Common Navigation Commands",
    "text": "Common Navigation Commands\n\ncd = “change directory”, will place you in a new position based on your path argument\n\ncd .. “go up one directory”\ncd – “go to the directory you were at last (like the back arrow on an internet browser)”\ncd ~ “go to my home directory”"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#lets-practice",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#lets-practice",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Let’s practice!",
    "text": "Let’s practice!\n\nTry navigating around your computer using cd and ls\nIf you are on Ubuntu, you may need to create some empty directories in your Ubuntu folder before navigating in the terminal"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#making-new-files",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#making-new-files",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Making new files",
    "text": "Making new files\n\nMake new folders: mkdir\nMake new files: nano, touch\nRename files: mv\nMove files: mv\nCopy files: cp\nDelete files: rm\nDelete directories: rmdir\nExamining file length: wc\nReading files: cat\nLooking at beginning or end: head or tail"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#things-to-keep-in-mind",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#things-to-keep-in-mind",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Things to keep in mind",
    "text": "Things to keep in mind\n\nThe shell trusts you\n\nIt will delete files you say to delete\nIt will override files if you name 2 things the same\n\nNaming conventions\n\nAvoid spaces\nDon’t start with a –\nStick to letters, numbers, . , -, and _\n\nUse appropriate file extensions in file names\n\nSome software expect files with certain extensions (.fasta, .txt, etc.)"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#lets-try-it-out",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#lets-try-it-out",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Let’s try it out",
    "text": "Let’s try it out\n\nMake a new directory called whatever you’d like.\nAdd a file named “Practice.txt” to the directory and add some text to it\nRead the contents of the file and get its length\nRename the file to “Super_practice.txt”\nMove the file to a new folder named “Testing”\nMake a copy of the file named “Super_practice_copy.txt”\nRead the contents of the file and get its length to make sure it’s the same as Super_practice.txt\nDelete the original “Super_practice.txt”"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#commands-for-reading-files",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#commands-for-reading-files",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Commands for Reading Files",
    "text": "Commands for Reading Files\n\ncat = concatenate and display files\n\nShows entire file at once\nGood for small files\n\nless = view file page by page\n\nNavigate with space (forward), b (back), q (quit)\nSearch with /pattern\n\nmore = similar to less but simpler\n\nSpace to go forward, q to quit\n\nhead = display first 10 lines (default)\n\nhead -n 20 file.txt shows first 20 lines\n\ntail = display last 10 lines (default)\n\ntail -n 20 file.txt shows last 20 lines\ntail -f file.txt follows file as it grows (useful for logs)"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#input-redirection",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#input-redirection",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Input Redirection",
    "text": "Input Redirection\n\n&lt; = redirect input from a file\n\ncommand &lt; input.txt\nSends contents of file as input to command\n\n&lt;&lt; = here document (multi-line input)\n\nAllows you to provide multi-line input directly in the terminal\n\nExample uses:\n\nwc -l &lt; data.txt counts lines in data.txt\nsort &lt; names.txt sorts contents of names.txt\nMany commands can read from files directly OR from stdin"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#output-redirection",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#output-redirection",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Output Redirection",
    "text": "Output Redirection\n\n&gt; = redirect output to a file (overwrites)\n\nls -l &gt; filelist.txt\nCreates new file or overwrites existing\n\n&gt;&gt; = append output to a file\n\necho \"new line\" &gt;&gt; existing.txt\nAdds to the end of existing file\n\n2&gt; = redirect error messages\n\ncommand 2&gt; errors.txt\nCaptures error messages separately\n\n&&gt; = redirect both output and errors\n\ncommand &&gt; all_output.txt"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#what-are-pipes",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#what-are-pipes",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "What are Pipes?",
    "text": "What are Pipes?\n\n| = the pipe operator\n\nTakes output from one command as input to another\nChains commands together\nNo intermediate files needed!\n\nBasic syntax:\n\ncommand1 | command2 | command3\n\nPower of Unix philosophy:\n\nSmall tools that do one thing well\nCombine them to do complex tasks"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#common-pipe-patterns",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#common-pipe-patterns",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Common Pipe Patterns",
    "text": "Common Pipe Patterns\n\nCounting patterns:\n\ngrep \"pattern\" file.txt | wc -l\nCount lines matching a pattern\n\nSorting and uniqueness:\n\ncat file.txt | sort | uniq\nSort lines and remove duplicates\n\nFinding top/bottom items:\n\nsort data.txt | head -5\nGet top 5 after sorting\n\nFiltering and processing:\n\nls -l | grep \".txt\" | awk '{print $5, $9}'\nList txt files with sizes"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#advanced-pipe-examples",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#advanced-pipe-examples",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Advanced Pipe Examples",
    "text": "Advanced Pipe Examples\n\nMulti-step data processing:\n\ncat data.csv | cut -d',' -f2 | sort | uniq -c | sort -rn\nExtract column 2, count unique values, sort by frequency\n\nReal-time monitoring:\n\ntail -f logfile.txt | grep ERROR\nWatch log file for errors in real-time\n\nComplex transformations:\n\nfind . -name \"*.txt\" | xargs wc -l | sort -n\nFind all txt files and sort by line count"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#combining-it-all-together",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#combining-it-all-together",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Combining It All Together",
    "text": "Combining It All Together\nExample workflow:\n# Read a file, process it, save results, and display\ncat data.txt | \\\n  grep -v \"^#\" | \\       # Remove comment lines\n  cut -f1,3 | \\          # Extract columns 1 and 3\n  sort -k2 -n | \\        # Sort by column 2 numerically\n  tee results.txt | \\    # Save to file\n  head -10               # Show top 10\n\nThe backslash allows you to continue commands on multiple lines for readability"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#practice-exercise-files-and-pipes",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#practice-exercise-files-and-pipes",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Practice Exercise: Files and Pipes",
    "text": "Practice Exercise: Files and Pipes\nTry these exercises:\n\nCreate a file with a list of numbers (one per line)\nUse pipes to sort them numerically\nSave the sorted list to a new file using redirection\nUse tee to display and save the top 5 numbers\nCount how many unique numbers you have using pipes\nAppend the count to your results file"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#tips-for-working-with-files-and-pipes",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#tips-for-working-with-files-and-pipes",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Tips for Working with Files and Pipes",
    "text": "Tips for Working with Files and Pipes\n\nTest pipes step by step\n\nBuild complex pipes incrementally\nCheck output at each stage\n\nUse less for large files instead of cat\nRemember: &gt; overwrites, &gt;&gt; appends\nPipe efficiency:\n\nFilter early in the pipeline\nReduces data passed between commands\n\nSave intermediate results when debugging complex pipes"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#an-example-to-get-us-started",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#an-example-to-get-us-started",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "An example to get us started",
    "text": "An example to get us started"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#data-set-rules-of-thumb-aka-tidy-data",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#data-set-rules-of-thumb-aka-tidy-data",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Data set rules of thumb (aka Tidy Data)",
    "text": "Data set rules of thumb (aka Tidy Data)\n\nStore a copy of data in nonproprietary software and hardware formats, such as plain ASCII text (aka a flat file)\nLeave an uncorrected file when doing analyses\nUse descriptive names for your data files and variables\nInclude a header line with descriptive variable names\nMaintain effective metadata about the data (data dictionary)\nWhen you add observations to a database, add rows\nWhen you add variables to a database, add columns, not rows\nA column of data should contain only one data type"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#not-all-data-are-tidy-to-begin-with",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#not-all-data-are-tidy-to-begin-with",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Not all data are tidy to begin with",
    "text": "Not all data are tidy to begin with\n\nSometimes need to do some data wrangling\nBut also contingency tables"
  },
  {
    "objectID": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#types-of-data",
    "href": "Lecture_Folder/Week2_BioE_Comp_Tools_2025.html#types-of-data",
    "title": "Week 2 Computational Tools for Bioengineers",
    "section": "Types of data",
    "text": "Types of data\n\n\n\n\n\n\n\n\n\nCategorical\n\nQuantitative\n\n\n\nOrdinal\nNominal\nRatio\nInterval\n\n\nsmall, medium, large\napples, oranges, bananas\nkilograms, dollars, years\ntemperature, calendar year\n\n\nordered character\ncharacter\nnumeric\ninteger\n\n\n\n‘Factor’ is a special type of character variable that we will explore more later"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.1     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gt)\nlibrary(readxl)\ntheme_set(theme_minimal())"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#goals-of-the-course",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#goals-of-the-course",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Goals of the course",
    "text": "Goals of the course\n\n\n\n\n\n\n\nThis is a practical course and we will learn by doing\n\n\n\nTeach fundamental skills for your scientific careers\nProvide you with the computational tools necessary to carry out your work\nTo prepare you for more advanced statistics and programming education"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#class-introductions",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#class-introductions",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Class Introductions",
    "text": "Class Introductions\n\n\n\n\n\n\n\nWho are you?\n\n\n\nYour name\nYear in grad school\nHome lab or rotation lab\nWhat has your experience with programming/statistics been like?\nWhat is your good news this week?"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#section-2",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#section-2",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "",
    "text": "What will you learn?\n\n\n\nWhat is local, cluster and cloud computing\nUnix paths, commands and scripts\nRead and write basic scripts in R and Python\nImplement reproducible research practices\nMarkdown and LaTeX\nGitHub and GitHub Pages\nTalapas and Amazon Web Services (AWS)"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#class-logistics",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#class-logistics",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Class Logistics",
    "text": "Class Logistics\n\nMeet Mondays from 2:30pm - 3:50pm in KC106\n\nMost of class time will be hands-on coding practice, less time lecturing\n\nCoding practice via two homeworks later in the term\n\nAvailable Tuesday of that week, due before class on Tuesday in two weeks\n\nWeeks 10-11 you will complete a final coding project\n\nDesign script(s) that works with your research and interests using the skills you’ve learned this term"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#required-materials",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#required-materials",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Required Materials",
    "text": "Required Materials\n\nNo textbooks or purchases required\nAccess to a laptop or computer running Windows, MacOS, or Linux operating systems\nAn account on Talapas (through your lab, or through CBDS)\nAnnouncements and assignments posted on Canvas\nThe majority of course material on our class website https://wcresko.github.io/BioE_Comp_Tools/"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#computational-tools",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#computational-tools",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Computational Tools",
    "text": "Computational Tools\n\n\n\n\n\n\n\nMac vs. Linux vs. Windows\n\n\n\nMac and Linux systems run using the same language, but previous versions of Windows lacks some of the basic features found on other systems\nTo help you practice and learn how to code in Unix, we will help you install some programs on your computer for running Unix\nR and RStudio should work on any computer\nVisual Studio Code will also work on any computer\nSimilarly, LaTeX and Git will work on any computer"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#computational-tools-1",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#computational-tools-1",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Computational Tools",
    "text": "Computational Tools\n\nNeed to make sure that you have R installed\n\nlocally or on a server\nhttps://www.r-project.org\n\nCan run R from the command line\n\njust type R\ncan run it locally as well as on clusters"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#computational-tools-2",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#computational-tools-2",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Computational Tools",
    "text": "Computational Tools\n\nInstall an R Integrated Development Environment (IDE)\n\nRStudio: http://www.rstudio.com\nMakes working with R much easier, particularly for a new R user\nRun on Windows, Mac or Linux OS\nUse the RStudio Desktop Open Source (Free)\n\nOther IDEs\n\nWe will also use an IDE called Visual Studio Code\nYou will also use Jupyter Notebooks"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#accessing-the-shell---mac-and-linux",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#accessing-the-shell---mac-and-linux",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Accessing the shell - Mac and Linux",
    "text": "Accessing the shell - Mac and Linux\n\nMac users: open the “Terminal” app, or use another app like ‘iTerm2’\nLinux users: open one of several “Terminal” apps\n\n\n\n\n\n\nWindows users have a little more work to do\n\n\nSee the next slides"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#accessing-the-shell---windows",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#accessing-the-shell---windows",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Accessing the shell - Windows",
    "text": "Accessing the shell - Windows\n\nGuide: https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview\nRun Windows PowerShell as administrator\nInstall WSL2 by typing wsl --install\nRestart your computer\nSearch for and install Ubuntu from Microsoft store app\nOR type wsl --install -d ubuntu on PowerShell to do both at once"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#accessing-the-shell---windows-1",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#accessing-the-shell---windows-1",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Accessing the shell - Windows",
    "text": "Accessing the shell - Windows\n\nOpen Ubuntu and set up a username and password\nDoes not have to match your login info for Windows\nRun sudo apt update then sudo apt upgrade to ensure everything is up to date\nWill need to create folders and files within your Ubuntu folder on your computer"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#why-do-we-need-coding-and-scripting",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#why-do-we-need-coding-and-scripting",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Why do we need coding and scripting?",
    "text": "Why do we need coding and scripting?\n\nIt is incredibly fast and powerful, particularly for repeated actions\nIt allows you to do thousands of ‘clicks’ with single commands\nAbility to analyze large datasets that Excel and other GUIs can’t handle well\nAccess to thousands of free programs made for and by scientists\nThe commands work almost identically across platforms\nAbility to use computer clusters like Talapas"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-the-difference-between-coding-and-scripting",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-the-difference-between-coding-and-scripting",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "What is the difference between coding and scripting?",
    "text": "What is the difference between coding and scripting?\n\ncoding generally involves computer languages that use compilers\n\nC++, Fortran, Basic, etc\n\nscripting generally involves computer languages that are interpreted on the fly\n\nUnix, Python, R, Julia, etc.\n\ncoding - faster but less flexible; scripting - flexible but slower\nThe distinction between the two has become somewhat fuzzy and most modern analytical pipelines contain a combination of both"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-a-computer-system",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-a-computer-system",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "What is a Computer System?",
    "text": "What is a Computer System?\n\n\n\nHardware: Physical components\nSoftware: Programs and instructions\nFirmware: Low-level software in hardware\nData: Information being processed\n\n\n\n\n\n\n\ngraph TD\n    A[Input Devices] --&gt; B[CPU]\n    B --&gt; C[Memory]\n    C --&gt; B\n    B --&gt; D[Output Devices]\n    E[Storage] --&gt; C\n    C --&gt; E"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#the-fetch-decode-execute-cycle",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#the-fetch-decode-execute-cycle",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "The Fetch-Decode-Execute Cycle",
    "text": "The Fetch-Decode-Execute Cycle\n\n\n\n\n\ngraph LR\n    A[Fetch Instruction] --&gt; B[Decode Instruction]\n    B --&gt; C[Execute Instruction]\n    C --&gt; D[Store Results]\n    D --&gt; A\n\n\n\n\n\n\n\n\nFetch: Retrieve instruction from memory\nDecode: Interpret what the instruction means\nExecute: Perform the operation\nStore: Save results to memory or register\n\n\nThis is the fundamental cycle that every CPU performs billions of times per second"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#central-processing-unit-cpu",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#central-processing-unit-cpu",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Central Processing Unit (CPU)",
    "text": "Central Processing Unit (CPU)\n\n\nCore Components\n\nControl Unit (CU): Directs operations\nArithmetic Logic Unit (ALU): Performs calculations\nRegisters: Ultra-fast temporary storage\nCache: High-speed memory buffer\n\n\nKey Concepts\n\nClock Speed: Cycles per second (GHz)\nCores: Independent processing units\nThreads: Virtual cores for parallel processing\nInstruction Set: CPU’s language (x86, ARM)"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#graphics-processing-unit-gpu",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#graphics-processing-unit-gpu",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Graphics Processing Unit (GPU)",
    "text": "Graphics Processing Unit (GPU)\n\n\nCore Components\n\nStreaming Multiprocessors (SMs): Processing clusters\nCUDA Cores/Stream Processors: Parallel compute units\nVideo Memory (VRAM): Dedicated high-bandwidth memory\nMemory Controller: Manages data flow to/from VRAM\n\n\nKey Concepts\n\nParallel Architecture: Thousands of cores for simultaneous tasks\nMemory Bandwidth: Data throughput (GB/s)\nCompute Units: Groups of processing cores\nAPIs: Programming interfaces (CUDA, OpenCL, Vulkan)"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cpu-vs-gpu-comparison",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cpu-vs-gpu-comparison",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "CPU vs GPU Comparison",
    "text": "CPU vs GPU Comparison\n\n\nCPU Characteristics\n\nDesign Focus: Sequential processing & complex tasks\nCore Count: 4-64 powerful cores\nArchitecture: Optimized for single-thread performance\nMemory: Large cache, lower bandwidth\nBest For:\n\nOperating systems & general computing\nComplex branching logic\nLow-latency operations\nSerial tasks\n\n\n\nGPU Characteristics\n\nDesign Focus: Parallel processing & high throughput\nCore Count: Thousands of smaller cores\nArchitecture: Optimized for massive parallelism\nMemory: Smaller cache, higher bandwidth\nBest For:\n\nGraphics rendering\nMachine learning/AI\nScientific simulations\nParallel computations"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#random-access-memory-ram",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#random-access-memory-ram",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Random Access Memory (RAM)",
    "text": "Random Access Memory (RAM)\n\n\nTypes of RAM\nDRAM (Dynamic RAM)\n\nMain system memory\nNeeds constant refresh\nCheaper, higher density\nDDR4, DDR5 standards\n\nSRAM (Static RAM)\n\nUsed in CPU cache\nNo refresh needed\nFaster but expensive\nLower density\n\n\nKey Characteristics\n\nVolatile: Data lost when power off\nRandom Access: Any location equally fast\nBandwidth: Data transfer rate\nLatency: Access delay\nDual Channel: Parallel data paths"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#persistent-storage-systems",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#persistent-storage-systems",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Persistent Storage Systems",
    "text": "Persistent Storage Systems\n\n\nHard Disk Drives (HDD)\n\nMechanical spinning platters\nMagnetic storage\nLarge capacity, low cost\n~100-200 MB/s throughput\nHigher latency (~10ms)\n\n\nSolid State Drives (SSD)\n\nNo moving parts (NAND Flash)\nElectronic storage\nFaster access (~0.1ms)\n500-7000 MB/s throughput\nMore expensive per GB"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#inputoutput-io-systems",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#inputoutput-io-systems",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Input/Output (I/O) Systems",
    "text": "Input/Output (I/O) Systems\n\n\nInput Devices\n\nKeyboard & Mouse\nTouchscreen\nMicrophone\nCamera\nSensors\nNetwork Interface\n\n\nOutput Devices\n\nMonitor/Display\nPrinter\nSpeakers\nNetwork Interface\nActuators\n\n\nOperating Systems"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-an-operating-system",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-an-operating-system",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "What is an Operating System?",
    "text": "What is an Operating System?\nAn OS is system software that manages computer hardware, software resources, and provides common services for computer programs.\n\n\nKey Roles\n\nResource Manager\nExtended Machine\nUser Interface Provider\nSecurity Enforcer\n\n\nCommon Operating Systems\n\nDesktop: Windows, macOS, Unix, Linux\nMobile: Android, iOS\nServer: Unix, Linux, Windows Server\nSpecialized: Supercomputers, IoT"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#operating-system-architecture",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#operating-system-architecture",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Operating System Architecture",
    "text": "Operating System Architecture\n\n\n\n\n\ngraph TD\n    A[User Applications] --&gt; B[System Calls Interface]\n    B --&gt; C[Kernel]\n    C --&gt; D[Device Drivers]\n    D --&gt; E[Hardware]\n    \n    C --&gt; F[Process Management]\n    C --&gt; G[Memory Management]\n    C --&gt; H[File System]\n    C --&gt; I[I/O Management]"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#core-os-functions",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#core-os-functions",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Core OS Functions",
    "text": "Core OS Functions\n\n\n1. Process Management\n\nProcess Creation & Termination\nProcess Scheduling: CPU time allocation\nInter-Process Communication (IPC)\nSynchronization\nDeadlock Handling\n\n\n3. File System Management\n\nFile Operations: Create, read, write, delete\nDirectory Structure\nAccess Control & Permissions\nFile Allocation Methods\nDisk Space Management\n\n\n2. Memory Management\n\nMemory Allocation/Deallocation\nVirtual Memory\nPaging & Segmentation\nMemory Protection\nSwap Space Management\n\n\n4. Device Management\n\nDevice Drivers: Hardware abstraction\nI/O Scheduling\nBuffering & Caching\nInterrupt Handling\nPlug and Play Support"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cpu-scheduling",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cpu-scheduling",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "CPU Scheduling",
    "text": "CPU Scheduling\n\n\nScheduling Algorithms\n\nFirst-Come-First-Served (FCFS)\n\nSimple but can cause long waits\n\nShortest Job First (SJF)\n\nOptimal average wait time\n\nRound Robin (RR)\n\nFair time slices for all\n\nPriority Scheduling\n\nImportant tasks first\n\n\n\nPerformance Metrics\n\nCPU Utilization: Keep CPU busy\nThroughput: Jobs completed/time\nTurnaround Time: Total completion time\nWaiting Time: Time in ready queue\nResponse Time: First response delay"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#security-protection",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#security-protection",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Security & Protection",
    "text": "Security & Protection\n\n\nProtection Mechanisms\n\nAccess Control Lists (ACLs)\nUser/Group Permissions\nMemory Protection: Segmentation\nCPU Modes: User vs Kernel\nSandboxing: Isolate processes\n\n\nSecurity Features\n\nAuthentication: User verification\nEncryption: Data protection\nFirewall: Network protection\nAntivirus: Malware detection\nUpdates: Patch vulnerabilities\n\n\n\n“Every program and user should operate using the least amount of privilege necessary”"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#section-4",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#section-4",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "",
    "text": "graph LR\n    A[1960s-70s&lt;br/&gt;Mainframes] --&gt; B[1980s-90s&lt;br/&gt;Personal Computers]\n    B --&gt; C[1990s-2000s&lt;br/&gt;Client-Server]\n    C --&gt; D[2000s&lt;br/&gt;Clusters/Grids]\n    D --&gt; E[2006+&lt;br/&gt;Cloud Computing]\n    E --&gt; F[2020s&lt;br/&gt;Edge/Hybrid]\n\n\n\n\n\n\nKey Drivers of Change\n\nPerformance Needs: Growing computational demands\nEconomics: Cost optimization and economies of scale\nConnectivity: Internet bandwidth improvements\nVirtualization: Hardware abstraction technologies"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#local-computing-overview",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#local-computing-overview",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Local Computing Overview",
    "text": "Local Computing Overview\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\nImportant\n\n\nComputing resources that are physically present and directly controlled by the user or organization\n\n\n\n\n\n\n\n\nCharacteristics\n\nComplete control over hardware\nData stays on-premises\nNo network dependency for compute\nPredictable performance\nOne-time purchase model\n\n\nCommon Setups\n\nDesktop workstations\nLaptop computers\nOn-premises servers\nLocal development machines"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#local-computing-architecture",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#local-computing-architecture",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Local Computing Architecture",
    "text": "Local Computing Architecture\n\n\n\n\n\n%%{init: {'theme':'base'}}%%\ngraph TB\n    A[Applications] --&gt; B[Operating System]\n    B --&gt; C[Hardware Abstraction Layer]\n    C --&gt; D[CPU]\n    C --&gt; E[Memory]\n    C --&gt; F[Storage]\n    C --&gt; G[GPU]\n    C --&gt; H[Network Card]\n    H --&gt; I[Internet/LAN]"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#local-computing-pros-and-cons",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#local-computing-pros-and-cons",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Local Computing: Pros and Cons",
    "text": "Local Computing: Pros and Cons\n\n\nAdvantages ✓\n\nLow Latency: No network overhead\nData Control: Complete ownership\nPrivacy: Data never leaves premises\nPredictable Costs: One-time investment\nOffline Capability: Works without internet\nCustomization: Full hardware/software control\n\n\nDisadvantages ✗\n\nLimited Scale: Hardware constraints\nMaintenance: User responsibility\nUpfront Costs: High initial investment\nDisaster Recovery: Manual backup needed\nResource Waste: Idle during off-hours\nUpgrade Complexity: Physical intervention"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cluster-computing-overview",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cluster-computing-overview",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Cluster Computing Overview",
    "text": "Cluster Computing Overview\nA collection of interconnected computers working together as a single system\n\n\n\n\n\n%%{init: {'theme':'base'}}%%\ngraph TB\n    M[Master/Head Node] --&gt; N1[Node 1]\n    M --&gt; N2[Node 2]\n    M --&gt; N3[Node 3]\n    M --&gt; N4[Node N]\n    N1 -.-&gt; S[Shared Storage]\n    N2 -.-&gt; S\n    N3 -.-&gt; S\n    N4 -.-&gt; S\n    U[Users] --&gt; M\n\n\n\n\n\n\nKey Components\n\nHead Node: Job scheduling and management\nCompute Nodes: Worker machines\nInterconnect: High-speed network (InfiniBand, 10GbE+)\nShared Storage: Parallel file systems (Lustre, GPFS)"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#resource-managers",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#resource-managers",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Resource Managers",
    "text": "Resource Managers\nThese are used to schedule computing jobs on computer clusters.\n\n\n\nSystem\nUse Case\nKey Features\n\n\n\n\nSLURM\nHPC\nAdvanced scheduling, power management\n\n\nPBS/Torque\nTraditional HPC\nMature, stable, wide support\n\n\nSGE/UGE\nMixed workloads\nFlexible policies\n\n\nKubernetes\nContainers\nMicroservices, auto-scaling\n\n\n\n\n\n\n\n\n\nImportant\n\n\nWe use SLURM on Talapas at the University of Oregon for scheduling compute jobs"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cluster-computing-pros-and-cons",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cluster-computing-pros-and-cons",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Cluster Computing: Pros and Cons",
    "text": "Cluster Computing: Pros and Cons\n\n\nAdvantages ✓\n\nScalability: Add nodes as needed\nPerformance: Parallel processing power\nCost-Effective: Commodity hardware\nFault Tolerance: Node redundancy\nResource Sharing: Multiple users/projects\nSpecialized Hardware: GPUs, high-mem nodes\n\n\nDisadvantages ✗\n\nComplexity: Requires expertise\nInfrastructure: Space, power, cooling\nNetwork Dependency: Interconnect bottlenecks\nSoftware Licenses: Per-node costs\nMaintenance: Hardware failures\nInitial Setup: Complex configuration"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cloud-computing-overview",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cloud-computing-overview",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Cloud Computing Overview",
    "text": "Cloud Computing Overview\nOn-demand delivery of computing resources over the internet with pay-as-you-go pricing\n\n\n\n\n\n%%{init: {'theme':'base'}}%%\ngraph TB\n    R[Region 1] --&gt; AZ1[Availability Zone 1]\n    R --&gt; AZ2[Availability Zone 2]\n    AZ1 --&gt; C[Compute]\n    AZ1 --&gt; S[Storage]\n    AZ1 --&gt; N[Networking]\n    AZ2 --&gt; C2[Compute]\n    AZ2 --&gt; S2[Storage]\n    AZ2 --&gt; N2[Networking]\n    U[Users] -.Internet.-&gt; R\n\n\n\n\n\n\nMajor Providers\n\nAmazon Web Services (AWS): Market leader, 200+ services\nMicrosoft Azure: Enterprise integration\nGoogle Cloud Platform: AI/ML focus\nOthers: IBM Cloud, Oracle Cloud, Alibaba Cloud"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cloud-computing-pros-and-cons",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#cloud-computing-pros-and-cons",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Cloud Computing: Pros and Cons",
    "text": "Cloud Computing: Pros and Cons\n\n\nAdvantages ✓\n\nElastic Scaling: Instant resource adjustment\nPay-per-Use: No idle resource costs\nGlobal Reach: Multiple regions\nManaged Services: Reduced operations\nInnovation Speed: Latest technologies\nDisaster Recovery: Built-in redundancy\nNo CAPEX: Operating expense model\n\n\nDisadvantages ✗\n\nOngoing Costs: Can exceed on-prem\nVendor Lock-in: Proprietary services\nInternet Dependency: Connectivity required\nData Transfer Costs: Egress fees\nCompliance Complexity: Data residency\nLess Control: Shared responsibility\nPerformance Variability: Noisy neighbors"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-unix",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-unix",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "What is Unix?",
    "text": "What is Unix?\n\nA scripting language developed in 1969, released in 1973\nServes as the base language for many programs and computers\nRuns both locally on your computer and on large clusters like Talapas\nLinux is an open-source version of the same language"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-a-shell",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#what-is-a-shell",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "What is a shell?",
    "text": "What is a shell?\n\nThe ‘shell’ is a program that runs UNIX and takes in commands and gives them to the operating system\nBash acts as the shell in macs, linux, and now windows\nYou can access the shell via a terminal window"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#recipes-for-a-shell-command",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#recipes-for-a-shell-command",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Recipes for a shell command",
    "text": "Recipes for a shell command\n\nPrompt: notation used to indicate your computer is ready to accept a new command\nCommand: the building blocks of programming, tell computer to do a specific task\nOptions: change the behavior of a command\nArgument: what the command should operate on"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#why-use-the-shell",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#why-use-the-shell",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Why use the shell?",
    "text": "Why use the shell?\n\nSpeed\nCan handle extremely large file sizes\nUse programs only available via shell\nThe commands work almost identically across platforms\nYou can even use them on a large computer cluster like Talapas and AWS\nIt is incredibly powerful particularly for repeated actions\nIt allows you to do thousands of ‘clicks’ with single commands"
  },
  {
    "objectID": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#where-do-you-get-help",
    "href": "Lecture_Folder/Week1_BioE_Comp_Tools_2025.html#where-do-you-get-help",
    "title": "Week 1 Computational Tools for Bioengineers",
    "section": "Where do you get help?",
    "text": "Where do you get help?\n\nManual pages!\n\nThe shell has manuals for all basic commands\nType man [command_name] to access the manual for a specific command\nType q to exit\n\nAlso…the internet!"
  },
  {
    "objectID": "Policies.html",
    "href": "Policies.html",
    "title": "Policies",
    "section": "",
    "text": "This is a 1-credit hour course, so you should expect to complete ~ 30-40 hours of work for the course, or about 4 hours each week (this includes time in-class).\nMy estimate for time usage for activities and assignments in an average week is below – some weeks may have shorter or longer time commitments either by design or due to course scheduling.\n\n\n\nActivity\nHours per Week\n\n\n\n\nIn-class meetings\n~1.5 hours\n\n\nInformal exercises\n0.5\n\n\nHomework assignments\n1.0\n\n\nResearch, drafting, editing for final project\n1\n\n\nTOTAL\n4"
  },
  {
    "objectID": "Policies.html#workload-expectations",
    "href": "Policies.html#workload-expectations",
    "title": "Policies",
    "section": "",
    "text": "This is a 1-credit hour course, so you should expect to complete ~ 30-40 hours of work for the course, or about 4 hours each week (this includes time in-class).\nMy estimate for time usage for activities and assignments in an average week is below – some weeks may have shorter or longer time commitments either by design or due to course scheduling.\n\n\n\nActivity\nHours per Week\n\n\n\n\nIn-class meetings\n~1.5 hours\n\n\nInformal exercises\n0.5\n\n\nHomework assignments\n1.0\n\n\nResearch, drafting, editing for final project\n1\n\n\nTOTAL\n4"
  },
  {
    "objectID": "Policies.html#communication",
    "href": "Policies.html#communication",
    "title": "Policies",
    "section": "Communication",
    "text": "Communication\n\nElectronic\n\nOur class will communicate through our Canvas site. Announcements and emails are archived there, automatically forwarded to your UO email, and can even reach you by text. Check and adjust your settings under Account &gt; Notifications.\nWe will also be using this GitHub Pages website (https://wcresko.github.io/BioE_Comp_Tools/) for the course as the repository for lecture schedule, syllabus, lecture slides and other materials.\nEvery Monday I will post an Announcement that previews critical concepts we’ll work on that week and a checklist of the week’s due dates.\nI will contact individual students when needed through email, and I try to respond to questions within one business day.\nWhen giving feedback on assignments, I do so in Canvas, and turnaround time for feedback is generally one week.\n\n\n\nOffice hours\n\nI will host office hours each week on Tuesday from 3:00 to 4:00 in the KC connector on the 2nd floor. The end of many class periods will also function as a form of office hour.\nI welcome meetings outside my regular office hours as well - please email me to set a time.\nDuring office hours, students bring in a wide range of concerns, questions, and successes. We might\n\ntalk through a specific concept or problem to clarify it\nthink together about an issue a student is curious about that relates to the class\ndiscuss a student’s post-graduation goals\nidentify more supportive methods to study for a future exam or to begin a project\nor any number of other topics"
  },
  {
    "objectID": "Policies.html#classroom-community-expectations",
    "href": "Policies.html#classroom-community-expectations",
    "title": "Policies",
    "section": "Classroom Community Expectations",
    "text": "Classroom Community Expectations\n\nParticipate and Contribute:\nAll students are expected to participate by sharing ideas and contributing to the learning environment. This entails preparing, following instructions, and engaging respectfully and thoughtfully with others. While all students should participate, participation is not just talking, and a range of participation activities support learning. Participation might look like speaking aloud in the full class and in small groups, and working collaboratively on coding projects. We will establish more specific participation guidelines and criteria for contributions in our first weeks of the term.\n\n\nExpect and Respect Diversity\nAll classes at the University of Oregon welcome and respect diverse experiences, perspectives, and approaches. What is not welcome are behaviors or contributions that undermine, demean, or marginalize others based on race, ethnicity, gender, sex, age, sexual orientation, religion, ability, or socioeconomic status. We will value differences and communicate disagreements with respect. We may establish more specific guidelines and protocols to ensure inclusion and equity for all members of our learning community.\n\n\nHelp Everyone Learn\nPart of how we learn together is by learning from one another. To do this effectively, we need to be patient with each other, identify ways we can assist others, and be open-minded to receiving help and feedback from others. Don’t hesitate to contact me to ask for assistance or offer suggestions that might help us learn better."
  },
  {
    "objectID": "Policies.html#generative-artificial-intelligence-genai-use",
    "href": "Policies.html#generative-artificial-intelligence-genai-use",
    "title": "Policies",
    "section": "Generative Artificial Intelligence (GenAI) Use",
    "text": "Generative Artificial Intelligence (GenAI) Use\nStudents can use GenAI tools in this class to help with certain aspects of coding. We will discuss during the the class about GenAI can be a tool to help you, but it cannot replace your computational intuition and knowledge. However, you cannot use content such as text, graphics and code created by GenAI tools in your work. You must be the author/creator of your work submissions. For example, you can use a GenAI tool to suggest a paper outline based on a draft you provide it, or suggest some code, but you cannot submit a paper with text or code generated by GenAI as if the text or code is your own writing. If you are in doubt or have questions about a particular GenAI tool and if its use is okay, check in with me and let’s discuss!"
  },
  {
    "objectID": "Policies.html#university-course-policies",
    "href": "Policies.html#university-course-policies",
    "title": "Policies",
    "section": "University Course Policies",
    "text": "University Course Policies\nPlease read and make sure you are familiar with the important policies that apply to all UO courses, which can be found here."
  },
  {
    "objectID": "Syllabus.html",
    "href": "Syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "The goal of this 1 credit course is to provide graduate students in bioengineering and biosciences with foundational understanding of modern computational tools to aid in their research. The target audience is graduate students who have little or no experience with computational tools, or who would like a refresher and exposure to a broad quiver of resources. Learning outcomes for the course are understanding the fundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages. Unix command line for the manipulation of large data sets and running scripts both locally and on UO’s supercomputer Talapas. How to properly organize and format primary data and metadata files for analysis. The use of integrated developer environment (IDE) to write basic scripts in Python and R. NIH’s FAIR (findable, accessible, interoperable and reusable) principle and best practices for reproducible science including the use of Git/GitHub, Markdown and remote databases."
  },
  {
    "objectID": "Syllabus.html#course-description",
    "href": "Syllabus.html#course-description",
    "title": "Syllabus",
    "section": "",
    "text": "The goal of this 1 credit course is to provide graduate students in bioengineering and biosciences with foundational understanding of modern computational tools to aid in their research. The target audience is graduate students who have little or no experience with computational tools, or who would like a refresher and exposure to a broad quiver of resources. Learning outcomes for the course are understanding the fundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages. Unix command line for the manipulation of large data sets and running scripts both locally and on UO’s supercomputer Talapas. How to properly organize and format primary data and metadata files for analysis. The use of integrated developer environment (IDE) to write basic scripts in Python and R. NIH’s FAIR (findable, accessible, interoperable and reusable) principle and best practices for reproducible science including the use of Git/GitHub, Markdown and remote databases."
  },
  {
    "objectID": "Syllabus.html#course-structure",
    "href": "Syllabus.html#course-structure",
    "title": "Syllabus",
    "section": "Course Structure",
    "text": "Course Structure\nWe will hold class on Mondays from 2:30 to 3:50PM. These meetings will be relatively informal, and will usually begin with a 30-45 min. conceptual overview of topics with coding demonstrations. I will post all lecture slides as Markdown and HTML after class to the course website under the ‘Lectures’ tab. The remaining meeting time will be reserved for group work, questions, answers, and discussion. I encourage students to work on exercises and assignments during these periods so that questions can be directly addressed as they emerge."
  },
  {
    "objectID": "Syllabus.html#course-objectives",
    "href": "Syllabus.html#course-objectives",
    "title": "Syllabus",
    "section": "Course Objectives",
    "text": "Course Objectives\n\nScientific Computing Fundamentals\n\nDescribe fundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages.\nRead and write code in Unix.\nRead and write code in R using RStudio.\nProperly organize and format primary data and metadata files for analysis\nLearn programming fundamentals of the R statistical language, including objects, functions, iteration, and simulation.\nArticulate the importance of and requirements for reproducible science in bioinformatics.\nUtilize the UO’s supercomputer cluster, Talapas, for computationally intensive tasks.\n\nStatistical Visualization\n\nProduce well-designed and informative figures in RStudio.\nMake publication-quality data visualizations, including scatterplots, boxplots, frequency distributions, mosaic plots, etc.\n\nComputers and data\n\nCPUs, GPUs, storage\nFundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages.\nUnix, paths & shell commands including GREP, AWK and SED\nBasics of data structures, databases and tidy dataProperly organize and format primary data and metadata files for analysis\n\nIntegrative developer environments (IDEs)\n\nVirtual Code Studio\nRStudio\nupyter notebooks\n\nFoundations of scripting using Python and R\n\nR and Python fundamentals\npackages and extending functionality\nobjects and object oriented programming\nfunctions, iteration, and simulation\ndata wrangling\nUse and misuse of Generative AI as a digital assistant and ’vibe coding\n\nReproducible science\n\nthe NIH FAIR (Findable, accessible, interoperable) principles\nGit and GitHub for project management and collaboration\nMarkdown for use in manuscripts, presentations and websites\nIncluding LaTeX mathematical expressions in markdown\n\nRemote super computing\n\nUtilize the UO’s supercomputer cluster, Talapas, for computationally intensive tasks.\nSlurm scripts for big jobs\nOther remote systems such as AWS Azure"
  },
  {
    "objectID": "Syllabus.html#graded-assignments",
    "href": "Syllabus.html#graded-assignments",
    "title": "Syllabus",
    "section": "Graded Assignments",
    "text": "Graded Assignments\nProblem sets: Students will be assigned four problem sets (roughly one every 2 weeks) to complete independently. These will mostly focus on one or a few data sets each, and the goal will be for the students to organize, visualize, analyze, and interpret the data sets in light of specific scientific motivations. - 80% of grade.\nTerm project: Students will choose a large dataset to process on Talapas. The goal of this project is allow students agency in applying what they are learning in class to their own data - 40% of grade.\nPreparing and submitting assignments: The information required to complete all in-class assignments and problem sets will be given in instructions on Canvas. Students should carefully follow the detailed instructions associated with each assignment. Students are encouraged to work together and share information. In particular, some students will have a higher skill level than others, and we encourage those students with more experience to help their peers. However, no direct sharing of code is allowed.\nPreparing and submitting assignments: Assignments will be submitted on Canvas. Be sure to include your name on the document. Be professional – appropriately name your files, make sure they are organized, and submit only the information requested. Late assignments will not be accepted.\n\nGrading\n\n\n\nAssignment\nPercentage of Total Grade\n\n\n\n\nProblem Sets - 2 in total, 30% each\n60%\n\n\nTerm-long Projects\n40%\n\n\n\n\n\n\nGrade Percentage\nLetter Grade\nPass/No Pass Grade\n\n\n\n\n100% - 90%\nA\nPass\n\n\n89% - 80%\nB\nPass\n\n\n79% - 80%\nC\nNo Pass\n\n\n69% - 60%\nD\nNo Pass\n\n\n60% - 0%\nF\nNo Pass"
  },
  {
    "objectID": "Homework_Folder/HW2_2025.html",
    "href": "Homework_Folder/HW2_2025.html",
    "title": "Homework 2 - TBD",
    "section": "",
    "text": "Assignment: TBD\nDue: Submit your work via Canvas by the end of the day (midnight) on Monday, November 24th.\nDirections: TBD"
  },
  {
    "objectID": "Homework_Folder/HW2_2025.html#problem-set-2---directions",
    "href": "Homework_Folder/HW2_2025.html#problem-set-2---directions",
    "title": "Homework 2 - TBD",
    "section": "",
    "text": "Assignment: TBD\nDue: Submit your work via Canvas by the end of the day (midnight) on Monday, November 24th.\nDirections: TBD"
  },
  {
    "objectID": "Resources.html",
    "href": "Resources.html",
    "title": "Resources",
    "section": "",
    "text": "Base R Cheat Sheet\nRStudio Collection of Cheat Sheets\nGit Cheat Sheet\nMarkdown Cheat Sheet\nLaTeX Cheat Sheet"
  },
  {
    "objectID": "Resources.html#cheat-sheets",
    "href": "Resources.html#cheat-sheets",
    "title": "Resources",
    "section": "",
    "text": "Base R Cheat Sheet\nRStudio Collection of Cheat Sheets\nGit Cheat Sheet\nMarkdown Cheat Sheet\nLaTeX Cheat Sheet"
  }
]