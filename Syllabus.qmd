---
title: "Syllabus"
---

## Course Description

The goal of this 1 credit course is to provide graduate students in bioengineering and biosciences with foundational understanding of modern computational tools to aid in their research. The target audience is graduate students who have little or no experience with computational tools, or who would like a refresher and exposure to a broad quiver of resources. Learning outcomes for the course are understanding the fundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages. Unix command line for the manipulation of large data sets and running scripts both locally and on UO’s supercomputer Talapas. How to properly organize and format primary data and metadata files for analysis. The use of integrated developer environment (IDE) to write basic scripts in Python and R. NIH’s FAIR (findable, accessible, interoperable and reusable) principle and best practices for reproducible science including the use of Git/GitHub, Markdown and remote databases.

## Course Structure

We will hold class on Mondays from 2:30 to 3:50PM. These meetings will be relatively informal, and will usually begin with a 30-45 min. conceptual overview of topics with coding demonstrations. I will post all lecture slides as Markdown and HTML after class to the course website under the 'Lectures' tab. The remaining meeting time will be reserved for group work, questions, answers, and discussion. I encourage students to work on exercises and assignments during these periods so that questions can be directly addressed as they emerge.

## Course Objectives

-   *Scientific Computing Fundamentals*
    -   Describe fundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages.
    -   Read and write code in Unix.
    -   Read and write code in R using RStudio.
    -   Properly organize and format primary data and metadata files for analysis
    -   Learn programming fundamentals of the R statistical language, including objects, functions, iteration, and simulation.
    -   Articulate the importance of and requirements for reproducible science in bioinformatics.
    -   Utilize the UO’s supercomputer cluster, Talapas, for computationally intensive tasks.
-   *Statistical Visualization*
    -   Produce well-designed and informative figures in RStudio.
    -   Make publication-quality data visualizations, including scatterplots, boxplots, frequency distributions, mosaic plots, etc.
-   Computers and data
    -   CPUs, GPUs, storage
    -   Fundamental aspects of computer systems, including file types, storage structure, and the logic of programming languages.
    -   Unix, paths & shell commands including GREP, AWK and SED
    -   Basics of data structures, databases and tidy dataProperly organize and format primary data and metadata files for analysis
-   Integrative developer environments (IDEs)
    -   Virtual Code Studio
    -   RStudio
    -   upyter notebooks
-   Foundations of scripting using Python and R
    -   R and Python fundamentals
    -   packages and extending functionality
    -   objects and object oriented programming
    -   functions, iteration, and simulation
    -   data wrangling
    -   Use and misuse of Generative AI as a digital assistant and 'vibe coding
-   Reproducible science
    -   the NIH FAIR (Findable, accessible, interoperable) principles
    -   Git and GitHub for project management and collaboration
    -   Markdown for use in manuscripts, presentations and websites
    -   Including LaTeX mathematical expressions in markdown
-   Remote super computing
    -   Utilize the UO’s supercomputer cluster, Talapas, for computationally intensive tasks.
    -   Slurm scripts for big jobs
    -   Other remote systems such as AWS Azure

## Graded Assignments

**Problem sets:** Students will be assigned four problem sets (roughly one every 2 weeks) to complete independently. These will mostly focus on one or a few data sets each, and the goal will be for the students to organize, visualize, analyze, and interpret the data sets in light of specific scientific motivations. - 80% of grade.

**Term project:** Students will choose a large dataset to process on Talapas. The goal of this project is allow students agency in applying what they are learning in class to their own data - 40% of grade.

**Preparing and submitting assignments:** The information required to complete all in-class assignments and problem sets will be given in instructions on Canvas. Students should carefully follow the detailed instructions associated with each assignment. Students are encouraged to work together and share information. In particular, some students will have a higher skill level than others, and we encourage those students with more experience to help their peers. *However, no direct sharing of code is allowed.*

**Preparing and submitting assignments:** Assignments will be submitted on Canvas. Be sure to include your name on the document. Be professional – appropriately name your files, make sure they are organized, and submit only the information requested. Late assignments will not be accepted.

### *Grading*

| Assignment                          | Percentage of Total Grade |
|-------------------------------------|:-------------------------:|
| Problem Sets - 2 in total, 30% each |            60%            |
| Term-long Projects                  |            40%            |

| Grade Percentage | Letter Grade | Pass/No Pass Grade |
|:----------------:|:------------:|:------------------:|
|    100% - 90%    |      A       |        Pass        |
|    89% - 80%     |      B       |        Pass        |
|    79% - 80%     |      C       |      No Pass       |
|    69% - 60%     |      D       |      No Pass       |
|     60% - 0%     |      F       |      No Pass       |
