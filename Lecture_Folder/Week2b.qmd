---
title: "Week 2b - Statistics for Bioengineering"
author: "Bill Cresko"
format: 
  revealjs:
    footer: BioE_Stats_2025 - Knight Campus
    transition: fade
    transition-speed: slow
editor: visual
---

```{r}
library(tidyverse)
library(gt)
library(readxl)
```

## Today we will

-   Finish Markdown, Latex
-   Exploratory data analysis with ggplot2
-   Probability and distributions

::: callout-note
Homeworks will be assigned this evening and be due in 2 weeks
:::

# Markdown and LaTeX

## What is markdown? {.smaller}

-   Lightweight *formal* markup languages are used to add formatting to plaintext documents
    -   Adding basic syntax to the text will make elements look different once rendered/knit
    -   Available in many base editors
-   You then need a markdown application with a markdown processor/parser to render your text files into something more exciting
    -   Static and dynamic outputs!
    -   pdf, HTML, presentations, websites, scientific articles, books etc

## Formatting text

```{r, eval=FALSE, echo=TRUE}
*Italic* or _Italic_
**Bold** or __Bold__
```

-   *Italic* or *Italic*
-   **Bold** or **Bold**

## Formatting text {.smaller}

```{r, eval=FALSE, echo=TRUE}
> "You know the greatest danger facing us is ourselves, an irrational fear of the unknown. 
But there’s no such thing as the unknown — only things temporarily hidden, temporarily not understood."
>
> --- Captain James T. Kirk
```

> "You know the greatest danger facing us is ourselves, an irrational fear of the unknown. But there’s no such thing as the unknown — only things temporarily hidden, temporarily not understood."
>
> --- Captain James T. Kirk

## Formatting lists {.smaller}

```{r, eval=FALSE, echo=TRUE}
- list_element
    - sub_list_element #double tab to indent
    - sub_list_element #double tab to indent
    - sub_list_element #double tab to indent
- list_element
    - sub_list_element #double tab to indent
#note the space after each dash- this is important!
```

-   list_element
    -   sub_list_element
    -   sub_list_element
    -   sub_list_element
-   list_element
    -   sub_list_element

## Formatting lists

```{r, eval=FALSE, echo=TRUE}
1. One
2. Two
3. Three
4. Four
```

1.  One
2.  Two
3.  Three
4.  Four

## Inserting images or URLs {.smaller}

```{r, eval=FALSE, echo=TRUE}
[Link](https://commonmark.org/help/)
![Image](https://i1.wp.com/evomics.org/wp-content/uploads/2012/07/20120115-IMG_0297.jpg)
```

[Link](https://commonmark.org/help/) ![Image](https://i1.wp.com/evomics.org/wp-content/uploads/2012/07/20120115-IMG_0297.jpg)

## Including code chunks {.smaller}

```{R, echo=TRUE}

x <- 2
x^2

```

## What is LaTeX? {.smaller}

-   Pronounced «Lah-tech» or «Lay-tech» (to rhyme with «Bertolt Brecht»)
-   A document preparation system for high-quality typesetting
-   It is most often used for medium-to-large technical or scientific documents
-   Can be used for almost any form of publishing.
-   Typesetting journal articles, technical reports, books, and slide presentations
-   Allows for precise mathematical statements
-   https://www.latex-project.org
-   **Importantly, LaTeX can be included right into Markdown documents**

## Operators and Symbols

```{r, eval=FALSE, echo=TRUE}
$$ \large a^x, \sqrt[n]{x}, \vec{\jmath}, \tilde{\imath}$$
```

$$ \large a^x, \sqrt[n]{x}, \vec{\jmath}, \tilde{\imath}$$

```{r, eval=FALSE, echo=TRUE}
$$ \large \alpha, \beta, \gamma$$
```

$$ \large \alpha, \beta, \gamma$$

## Operators and Symbols

```{r, eval=FALSE, echo=TRUE}
$$ \large\approx, \neq, \nsim $$
```

$$ \large\approx, \neq, \nsim $$

```{r, eval=FALSE, echo=TRUE}
$$\large \partial, \mathbb{R}, \flat$$
```

$$\large \partial, \mathbb{R}, \flat$$

## Equations {.smaller}

Binomial sampling equation

```{r, eval=FALSE, echo=TRUE}
$$\large f(k) = {n \choose k} p^{k} (1-p)^{n-k}$$
```

$$\large f(k) = {n \choose k} p^{k} (1-p)^{n-k}$$

Poisson Sampling Equation

```{r, eval=FALSE, echo=TRUE}
$$\large Pr(Y=r) = \frac{e^{-\mu}\mu^r}{r!}$$
```

$$\large Pr(Y=r) = \frac{e^{-\mu}\mu^r}{r!}$$

## Differential Equations {.smaller}

```{r, eval=FALSE, echo=TRUE}
$$\iint xy^2\,dx\,dy =\frac{1}{6}x^2y^3$$
```

$$\iint xy^2\,dx\,dy =\frac{1}{6}x^2y^3$$

## Matrix formulations {.smaller}

```{r, eval=FALSE, echo=TRUE}
$$	\begin{matrix}
		-2 & 1 & 0 & 0 & \cdots & 0  \\
		1 & -2 & 1 & 0 & \cdots & 0  \\
		0 & 1 & -2 & 1 & \cdots & 0  \\
		0 & 0 & 1 & -2 & \ddots & \vdots \\
		\vdots & \vdots & \vdots & \ddots & \ddots & 1  \\
		0 & 0 & 0 & \cdots & 1 & -2
	\end{matrix} $$
```

$$  \begin{matrix}
        -2 & 1 & 0 & 0 & \cdots & 0  \\
        1 & -2 & 1 & 0 & \cdots & 0  \\
        0 & 1 & -2 & 1 & \cdots & 0  \\
        0 & 0 & 1 & -2 & \ddots & \vdots \\
        \vdots & \vdots & \vdots & \ddots & \ddots & 1  \\
        0 & 0 & 0 & \cdots & 1 & -2
    \end{matrix} $$

## In-line versus fenced {.smaller}

```{r, eval=FALSE, echo=TRUE}
This equation, $y=\frac{1}{2}$, is included inline
```

This equation, $y=\frac{1}{2}$, is included inline

```{r, eval=FALSE, echo=TRUE}
Whereas this equation, $$y=\frac{1}{2}$$, is put on a separate line
```

Whereas this equation $$y=\frac{1}{2}$$ is put on a separate line

## Markdown is very flexible {.smaller}

-   You can import RMarkdown templates into RStudio and open as a new Rmarkdown file
-   Better yet there are packages that add functionality
    -   books
    -   journal articles
    -   slide shows (these slides!)
    -   interactive exercises

------------------------------------------------------------------------

# Exploratory Data Analysis with ggplot2

## Reading in and Exporting Data Frames {.flexbox .vcenter}

\
\

```{r, eval = FALSE, echo = TRUE}
YourFile <- read.table('yourfile.csv', header=T, row.names=1, sep=',')
YourFile <- read.table('yourfile.txt', header=T, row.names=1, sep='\t')
```

\
\

```{r, eval = FALSE, echo = TRUE}
write.table(YourFile, "yourfile.csv", quote=F, row.names=T, sep=",")
write.table(YourFile, "yourfile.txt", quote=F, row.names=T, sep="\t")
```

## Indexing in data frames {.flexbox .vcenter}

-   Next up - indexing just a subset of the data
-   This is a very important idea in R, that you can analyze just a subset of the data.
-   This is analyzing only the data in the file you made that has the factor value 'mixed'.

```{r, echo=TRUE, eval=FALSE}
print (YourFile[,2])
print (YourFile$variable)
print (YourFile[2,])
plot (YourFile$variable1, YourFile$variable2)
```

## Types of vectors of data {.smaller}

-   `int` stands for integers

-   `dbl` stands for doubles, or real numbers

-   `chr` stands for character vectors, or strings

-   `dttm` stands for date-times (a date + a time)

-   `lgl` stands for logical, vectors that contain only TRUE or FALSE

-   `fctr` stands for factors, which R uses to represent categorical variables with fixed possible values

-   `date` stands for dates

::: callout-note
-   Integer and double vectors are known collectively as numeric vectors.
-   In `R` numbers are doubles by default.
:::

## Types of vectors of data {.smaller}

-   Logical vectors can take only three possible values:
    -   `FALSE`
    -   `TRUE`
    -   `NA` which is 'not available'.
-   Integers have one special value: NA, while doubles have four:
    -   `NA`
    -   `NaN` which is 'not a number'
    -   `Inf`
    -   `-Inf`

# ggplot2

## Plotting using `ggplot2()` {.smaller}

-   Part of the `tidyverse` suite of packages
-   In most cases, you start with `ggplot2()`
-   Supply a dataset and aesthetic mapping with `aes()`
-   Determine the type of plot using `geom_point()` or `geom_histogram()` or others
-   Many more options and controls available!
-   More info: https://ggplot2.tidyverse.org/

## GGPlot2 and the Grammar of Graphics

-   GG stands for ‘Grammar of Graphics’
-   A good paragraph uses good grammar to convey information
-   A good figure uses good grammar in the same way
-   Seven general components can be used to create most figures

## GGPlot2 and the Grammar of Graphics

```{r, echo=FALSE, fig.cap="", out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/images_4a.017.jpeg")
```

## Plotting using `ggplot()` {.smaller}

-   Install and load `ggplot2`

```{r, echo=TRUE}
# install.packages("ggplot2")
library("ggplot2")
```

## Scatterplots with `ggplot`

-   Use the preloaded `mpg` dataset available in RStudio

```{r, echo=TRUE, out.width='55%', fig.asp=.75, fig.align='center'}
ggplot(mpg, aes(displ, hwy, color = class)) + 
  geom_point(size = 6,
             shape = "square",
             alpha = 0.4)
```

## Boxplots in `ggplot`

```{r, echo=TRUE, out.width='100%', fig.asp=.3, fig.align='center'}
ggplot(mpg, aes(manufacturer, hwy, colour = class)) + 
  geom_boxplot() + 
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 45, hjust=1))
```

## The `geom_bar` function {.flexbox .vcenter}

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds) +
  geom_bar(mapping=aes(x=cut))
```

Now try this...

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds) +
  geom_bar(mapping=aes(x=cut, color=cut))
```

and this...

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds) +
  geom_bar(mapping=aes(x=cut, fill=cut))
```

and finally this...

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds) +
  geom_bar(mapping=aes(x=cut, fill=clarity), position="dodge")
```

## The `geom_histogram` and `geom_freqpoly`function {.flexbox .vcenter}

With this function you can make a histogram

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds) +
  geom_histogram(mapping=aes(x=carat), binwidth=0.5)
```

This allows you to make a frequency polygram

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds) +
  geom_histogram(mapping=aes(x=carat), binwidth=0.5)
```

## The `geom_boxplot` function {.flexbox .vcenter}

Boxplots are very useful for visualizing data

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds, mapping=aes(x=cut, y=price)) +
  geom_boxplot()
```

\

```{r, eval=FALSE, echo=TRUE}
ggplot(data=mpg, mapping=aes(x=reorder(class, hwy, FUN=median), y=hwy)) +
  coordflip()
```

\

```{r, eval=FALSE, echo=TRUE}
ggplot(data=mpg, mapping=aes(x=class, y=hwy)) +
  geom_boxplot() +
  coordflip
```

## The `geom_point` & `geom_smooth` functions {.flexbox .vcenter}

```{r, eval=FALSE, echo=TRUE}
ggplot(data=diamonds2, mapping=aes(x=x, y=y)) +
  geompoint()
```

\

```{r, eval=FALSE, echo=TRUE}
ggplot(data=mpg) +
  geompoint(mapping=aes(x=displ, y=hwy)) +
  facet_wrap(~class, nrow=2)
```

\

```{r, eval=FALSE, echo=TRUE}
ggplot(data=mpg) +
  geompoint(mapping=aes(x=displ, y=hwy)) +
  facet_grid(drv~cyl)
```

\

```{r, eval=FALSE, echo=TRUE}
ggplot(data=mpg) +
  geomsmooth(mapping=aes(x=displ, y=hwy))
```

## Combining geoms {.flexbox .vcenter}

```{r, eval=TRUE, echo=TRUE}
ggplot(data=mpg) +
  geom_point(mapping=aes(x=displ, y=hwy)) +
  geom_smooth(mapping=aes(x=displ, y=hwy))
```

## Adding labels {.flexbox .vcenter}

```{r, eval=TRUE, echo=TRUE}
ggplot(data=mpg, aes(displ, hwy)) +
  geom_point(aes(color=class)) +
  geom_smooth(se=FALSE) +
  labs(
    title = "Fuel efficiency generally decreases with engine size",
    caption = "Data from fueleconomy.gov"
  )
```

## What type of plot do I use for each data type?

![Flow chart to determine what type of data visualization and which ggplot geom to use](images/Chart_flow_chart.jpeg)
