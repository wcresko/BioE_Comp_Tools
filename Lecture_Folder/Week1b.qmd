---
title: "Week 1b - Statistics for Bioengineering"
author: "Bill Cresko"
format: 
  revealjs:
    footer: BioE_Stats_2025 - Knight Campus
    transition: fade
    transition-speed: slow
editor: visual
---

```{r}
library(tidyverse)
library(gt)
library(readxl)
theme_set(theme_minimal())
```

# What you will learn today

-   Intro to Unix and the command line
-   Scripting
-   R & RStudio
-   Markdown

On Tuesday

-   Git and GitHub
-   Exploratory Data Analysis (EDA)

## Why do we need coding and scripting?

::: incremental
-   It is incredibly fast and powerful, particularly for repeated actions
-   It allows you to do thousands of ‘clicks’ with single commands
-   Ability to analyze large datasets that Excel and other GUIs can't handle well
-   Access to thousands of free programs made for and by scientists
-   The commands work almost identically across platforms
-   Ability to use computer clusters like Talapas
:::

## What is the difference between coding and scripting?

::: incremental
-   `coding` generally involves computer languages that use `compilers`
    -   C\^{++}, Fortran, etc
-   `scripting` generally involves computer languages that are `interpreted` on the fly
    -   Python, R, Julia, etc.
-   coding - faster but less flexible; scripting - flexible but slower
-   The distinction between the two has become somewhat fuzzy and most modern analytical pipelines contain a combination of both
:::

## Why do we need statistics?

::: incremental
-   We almost never know the world perfectly, but still want to draw conclusions or make decisions
-   We need to estimate underlying parameters from samples of data
-   Sometimes we need to test hypotheses using data
-   Other times we need to more succinctly summarize and/or visualize large amounts of data
-   There are well known mathematical rules that help us
-   Statistics can be done by hand, but computers let us do most of the mathematics quickly
:::

## Why do we need statistics?

::: incremental
-   We want to turn data into conclusions about the world
    -   point estimates and confidence intervals
    -   experimental design
    -   hypothesis testing
    -   data reduction of highly dimensional data
-   We need a firm understanding of probability, sampling and distributions
:::

# Computational Tools - The Command Line {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_code.jpeg")
```

## What is Unix? {.flexbox .vcenter}

::: incremental
-   A scripting language developed in 1969, released in 1973
-   Serves as the base language for many programs and computers
-   Is the operating system for computers
-   Linux is an open-source version of the same language
:::

## What is a shell? {.flexbox .vcenter data-background="images/w1_shell.jpeg"}

-   The ‘shell’ is a program that runs UNIX and takes in commands and gives them to the operating system

-   Bash acts as the shell in macs, linux, and now windows

-   You can access the shell via a terminal window

##  {.flexbox .vcenter data-transition="fade-in"}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.010.jpeg")
```

## Recipes for a shell command {.flexbox .vcenter}

-   Prompt: notation used to indicate your computer is ready to accept a new command
-   Command: the building blocks of programming, tell computer to do a specific task
-   Options: change the behavior of a command
-   Argument: what the command should operate on

```{r, echo=FALSE, out.width='50%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_shell_command.jpeg")
```

## Why use the shell? {.flexbox .vcenter}

::: incremental
-   Speed
-   Examine large and/or unique files
-   Access super computers
-   Use programs only available via shell
-   The commands work almost identically across platforms
-   You can even use them on a large computer cluster like Talapas
-   It is incredibly powerful particularly for repeated actions
-   It allows you to do thousands of ‘clicks’ with single commands
:::

## Where do you get help? {.flexbox .vcenter}

-   Manual pages!
    -   The shell has manuals for all basic commands
    -   Type `man [command_name]` to access the manual for a specific command
    -   Type `q` to exit
-   Also...the internet!

------------------------------------------------------------------------

# Common navigation commands {.flexbox .vcenter data-transition="fade-in"}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_navigation_1.jpeg")
```

## Common navigation commands {.flexbox .vcenter data-transition="fade-in"}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_navigation_2.jpeg")
```

## The way you normally navigate {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_finder.jpeg")
```

##  {.flexbox .vcenter data-transition="fade-in"}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_navigate.jpeg")
```

## How is a computer organized? {.flexbox .vcenter}

-   System of directories (folders) and files
-   / = the root directory, which holds all other directories
-   Most of your files will be located under /Users in a directory of your username
-   the `~` is shorthand for your home folder
-   Navigation in the shell consists of jumping up and down between directories and seeing what’s in them
-   The "path" refers to the location a file is in
    -   ex: "/Users/wcresko/Documents"

```{r, echo=FALSE, out.width='100%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/w1_file_structure.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.012.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.013.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.015.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.016.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.017.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.018.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.019.jpeg")
```

## Common navigation commands {.flexbox .vcenter}

::: incremental
-   **`pwd`** = “print working directory”, which will print where you currently are in the system
    -   In Windows, **`cd`** will print your working directory
-   **`ls`** = “list”, list all directories and files in your current position
    -   `ls –F` = denote which results are directories, files, etc.
    -   `ls –l` = ”long format”, lists total file sizes
    -   `ls –r` = “reverse”, lists the results in reverse order
    -   `ls –S` = “size”, sort results by size
    -   `ls –t` = “time”, sort results by time created, from most recent to last
:::

## Common Navigation Commands {.flexbox .vcenter}

-   `cd` = “change directory”, will place you in a new position based on your path argument
    -   `cd ..` = go up one directory
    -   `cd –` = go to the directory you were at last (like the back arrow on an internet browser)

## Let's practice! {.flexbox .vcenter}

-   Try navigating around your computer using `cd` and `ls`
-   If you are on Ubuntu, you may need to create some empty directories in your Ubuntu folder before navigating in the terminal

# Working with files {.flexbox .vcenter}

## Making new files {.flexbox .vcenter}

::: incremental
-   Make new folders: `mkdir`
-   Make new files: `nano`, `touch`
-   Rename files: `mv`
-   Move files: `mv`
-   Copy files: `cp`
-   Delete files: `rm`
-   Examining file length: `wc`
-   Reading files: `cat`
-   Looking at beginning or end: `head` or `tail`
:::

## Things to keep in mind {.flexbox .vcenter}

-   The shell trusts you
    -   It will delete files you say to delete
    -   It will override files if you name 2 things the same
-   Naming conventions
    -   Avoid spaces
    -   Don’t start with a –
    -   Stick to letters, numbers, . , -, and \_
-   Use appropriate file extensions in file names
    -   Some software expect files with certain extensions (.fasta, .txt, etc.)

## Let's try it out {.flexbox .vcenter}

-   Make a new directory called whatever you'd like.
-   Add a file named “Practice.txt” to the directory and add some text to it
-   Read the contents of the file and get its length
-   Rename the file to “Super_practice.txt”
-   Move the file to a new folder named “Testing”
-   Make a copy of the file named “Super_practice_copy.txt”
-   Read the contents of the file and get its length to make sure it’s the same as Super_practice.txt
-   Delete the original “Super_practice.txt”

## Break

# Tidy Data

## An example to get us started {.smaller .flexbox .vcenter}

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='100%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.005.jpeg")
```

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.006.jpeg")
```

## Data set rules of thumb (aka Tidy Data) {.flexbox .vcenter}

-   Store a copy of data in nonproprietary software and hardware formats, such as plain ASCII text (aka a flat file)
-   Leave an uncorrected file when doing analyses
-   Use descriptive names for your data files and variables
-   Include a header line with descriptive variable names
-   Maintain effective metadata about the data
-   When you add observations to a database, add rows
-   When you add variables to a database, add columns, not rows
-   A column of data should contain only one data type

##  {.flexbox .vcenter}

```{r, echo=FALSE, out.width='90%', fig.asp=.75, fig.align='center'}
knitr::include_graphics("images/week_01.007.jpeg")
```

------------------------------------------------------------------------

## Computational Tools - R and RStudio {.flexbox .vcenter}

```{r, echo=FALSE, out.width='75%', fig.align='center'}
knitr::include_graphics("images/RStudio_Screenshot.png")
```

## Why use `R`? {.flexbox .vcenter .smaller}

::: incremental
-   Good general scripting tool for statistics and mathematics
-   Powerful and flexible and free
-   Runs on all computer platforms
-   New enhancements coming out all the time
-   Superb data management & graphics capabilities
:::

## Why use `R`? {.flexbox .vcenter .smaller}

::: incremental
-   Reproducibility - can keep your scripts to see exactly what was done
-   You can write your own functions
-   Lots of online help available
-   Can use a nice GUI front end such as `Rstudio`
-   Can embed your `R` analyses in dynamic, polished files using `Markdown`
-   Markdown can be reused for websites, papers, books, presentations...
:::

## `R scripts` and `Markdown files` {.flexbox .vcenter}

-   Often we want to write scripts that can just be run
-   We can also embed code in Markdown files that provide more annotations
-   https://quarto.org/docs/authoring/markdown-basics.html
-   You can insert `Rchunks` into `Quarto markdown` documents

## Rscript basics

-   A series of R commands that will be executed
-   Can add comments using hashtags `#`
-   Can have pipes (`|>`) to connect one step to the next

## Markdown basics

-   a very simplified way for standard typesetting
-   simple markdown can be rendered in numerous different ways
-   Lists, codeblocks, images and more can all be inserted

## Inserting equations in markdown

``` latex
$$e=mc^2$$
```

$$e=mc^2$$

``` latex
$$\iint\limits_{a}^{b} f(x,y) \, dx \, dy$$
```

$$\iint\limits_{a}^{b} f(x,y) \, dx \, dy$$

## BASICS of `R` {.flexbox .vcenter .smaller}

-   Commands can be submitted through the terminal, console or scripts
-   In your scripts, anything that follows '\#' symbol (aka hash) is just for humans
-   Notice on these slides I'm evaluating the code chunks and showing output
-   The output is shown here after the two `#` symbols and the number of output items is in `[]`
-   Also notice that `R` follows the normal priority of mathematical evaluation

```{r basic multiplication, echo=TRUE}
4*4
```

```{r more multiplication, echo=TRUE}
(4+3*2^2)
```

## Assigning Variables {.flexbox .vcenter}

-   A better way to do this is to assign variables
-   Variables are assigned values using the `<-` operator.
-   Variable names must begin with a letter, but other than that, just about anything goes.
-   Do keep in mind that `R` is case sensitive.

## Assigning Variables {.flexbox .vcenter}

```{r assigning variables, echo=TRUE, tidy=TRUE}

x <- 2
x*3
y <- x * 3
y-2

```

These do not work

```{r eval=FALSE, echo=TRUE}
3y <- 3
3*y <- 3
```

## Arithmetic operations on functions {.smaller}

-   Arithmetic operations can be performed easily on functions as well as numbers.
-   Try the following, and then your own.

```{r functions, eval = FALSE, echo = TRUE}
x+2
x^2
log(x)
```

-   Note that the last of these - `log` - is a built in function of `R`, and therefore the object of the function needs to be put in parentheses
-   These parentheses will be important, and we'll come back to them later when we add arguments after the object in the parentheses\
-   The outcome of calculations can be assigned to new variables as well, and the results can be checked using the 'print' command

## Arithmetic operations on functions {.flexbox .vcenter}

```{r, echo=TRUE}
y <- 67
print(y)

x <- 124
z <- (x*y)^2
print(z)
```

## STRINGS {.flexbox .vcenter}

-   Variables and operations can be performed on characters as well
-   Note that characters need to be set off by quotation marks to differentiate them from numbers
-   The `c` stands for `concatenate`
-   Note that we are using the same variable names as we did previously, which means that we're overwriting our previous assignment
-   A good rule of thumb is to use new names for each variable, and make them short but still descriptive

## STRINGS {.flexbox .vcenter}

```{r, echo=TRUE}
x <- "I Love"
print (x)
y <- "Biostatistics"
print (y)
z <- c(x,y)
print (z)
```

## FACTORS {.flexbox .vcenter}

-   The variable `z` is now what is called a list of character values.
-   Sometimes we would like to treat the characters as if they were units for subsequent calculations.
-   These are called `factors`, and we can redefine our character variables as factors.
-   This might seem a bit strange, but it’s important for statistical analyses where we might want to see the mean or variance for two different treatments.

## FACTORS {.flexbox .vcenter}

```{r, eval = FALSE, echo = TRUE}
z_factor <- as.factor(z)
print (z_factor)
```

-   Note that factor levels are reported alphabetically

## VECTORS {.flexbox .vcenter}

-   In general `R` thinks in terms of vectors (a list of characters, factors or numerical values) and it will benefit any `R` user to try to write programs with that in mind, as it will simplify most things.
-   Vectors can be assigned directly using the 'c()' function and then entering the exact values.

## VECTORS {.flexbox .vcenter}

```{r Example vectors, echo=TRUE}
x <- c(2,3,4,2,1,2,4,5,10,8,9)
print(x)
```

## Basic Statistics {.flexbox .vcenter}

-   Many functions exist to operate on vectors.
-   Combine these with your previous variable to see what happens.
-   Also, try to find other functions (e.g. standard deviation).

## Basic Statistics {.flexbox .vcenter}

```{r, eval = FALSE, echo = TRUE}
mean(x)
median(x)
var(x)
log(x)
ln(x)
sqrt(x)
sum(x)
length(x)
sample(x, replace = T)
```

-   Notice that the last function (`sample`) has an argument (`replace=T`)
-   Arguments simply modify or direct the function in some way
-   There are many arguments for each function, some of which are defaults

## Getting Help {.flexbox .vcenter}

-   Getting Help on any function is very easy - just type a question mark and the name of the function.
-   There are functions for just about anything within `R` and it is easy enough to write your own functions if none already exist to do what you want to do.
-   In general, function calls have a simple structure: a function name, a set of parentheses and an optional set of parameters to send to the function.
-   Help pages exist for all functions that, at a minimum, explain what parameters exist for the function.\
-   Help can be accessed a few ways - try them :

## Getting Help {.flexbox .vcenter}

```{r, eval = FALSE, echo = TRUE}
- help(mean)
- ?mean
- example(mean)
- help.search("mean")
- apropos("mean")
- args(mean)
```

## Creating vectors {.smaller}

-   Creating vector of new data by entering it by hand can be a drag
-   However, it is also very easy to use functions such as `seq` and `sample`
-   Try the examples below Can you figure out what the three arguments in the parentheses mean?
-   Try varying the arguments to see what happens.
-   Don't go too crazy with the last one or your computer might slow way down

## Creating vectors {.smaller}

```{r, echo = TRUE}
seq_1 <- seq(0.0, 10.0, by = 0.1)
print(seq_1)
seq_2 <- seq(10.0, 0.0, by = -0.1)
print(seq_2)
```

## Creating vectors {.smaller}

```{r, echo = TRUE}
seq_square <- (seq_2)*(seq_2)
print(seq_square)
```

## Creating vectors {.smaller}

```{r, echo = TRUE}
seq_square_new <- (seq_2)^2
print(seq_square_new)
```

## Drawing samples from distributions {.flexbox .vcenter}

-   Here is a way to create your own data sets that are random samples.
-   Again, play around with the arguments in the parentheses to see what happens.

## Drawing samples from distributions {.smaller}

```{r Samples from distributions 1, out.width='100%', echo = TRUE}
x <- rnorm (10000, 0, 10)
y <- sample (1:10000, 10000, replace = T)
xy <- cbind(x,y)
plot(x,y) 
```

## Drawing samples from distributions {.smaller}

```{r Samples from distributions 2, out.width='100%', echo = TRUE}
x <- rnorm (10000, 0, 10)
y <- sample (1:10000, 10000, replace = T)
xy <- cbind(x,y)
plot(xy)
```

## Drawing samples from distributions {.smaller}

```{r Samples from distributions 3, out.width='100%', echo = TRUE}
x <- rnorm (10000, 0, 10)
y <- sample (1:10000, 10000, replace = T)
xy <- cbind(x,y)
hist(x)
```

## Drawing samples from distributions {.flexbox .vcenter}

-   You’ve probably figured out that y from the last example is drawing numbers with equal probability.
-   What if you want to draw from a distribution?
-   Again, play around with the arguments in the parentheses to see what happens.

## Drawing samples from distributions {.flexbox .vcenter out.width="50%"}

```{r, out.width='100%', echo = TRUE}
x <-rnorm(1000, 0, 100)
hist(x, xlim = c(-500,500))
curve(50000*dnorm(x, 0, 100), xlim = c(-500,500), add=TRUE, col='Red')
```

-   `dnorm()` generates the probability density, which can be plotted using the `curve()` function.
-   Note that is curve is added to the plot using `add=TRUE`

## Visualizing Data {.flexbox .vcenter}

-   So far you've been visualizing just the list of output numbers
-   Except for the last example where I snuck in a `hist` function.
-   You can also visualize all of the variables that you've created using the `plot` function (as well as a number of more sophisticated plotting functions).
-   Each of these is called a `high level` plotting function, which sets the stage
-   `Low level` plotting functions will tweak the plots and make them beautiful

## Visualizing Data {.flexbox .vcenter}

-   What do you think that each of the arguments means for the plot function?
-   A cool thing about `R` is that the options for the arguments make sense.
-   Try adjusting an argument and see if it works
-   Note next week we will be exploring the plotting in `GGPlot2`

## Visualizing Data {.flexbox .vcenter .smaller}

```{r, echo = TRUE}
seq_1 <- seq(0.0, 10.0, by = 0.1) 
plot (seq_1, xlab="space", ylab ="function of space", type = "p", col = "red")
```

## Putting plots in a single figure {.flexbox .vcenter}

-   On the next slide
-   The first line of the lower script tells R that you are going to create a composite figure that has two rows and two columns. Can you tell how?
-   Now, modify the code to add two more variables and add one more row of two panels.

```{r, echo=TRUE, outwidth="50%", out.height="20%"}
seq_1 <- seq(0.0, 10.0, by = 0.1)
seq_2 <- seq(10.0, 0.0, by = -0.1)
```

## Putting plots in a single figure {.flexbox .vcenter .smaller}

```{r, echo=TRUE, outwidth="50%", out.height="50%"}
par(mfrow=c(2,2))
plot (seq_1, xlab="time", ylab ="p in population 1", type = "p", col = 'red')
plot (seq_2, xlab="time", ylab ="p in population 2", type = "p", col = 'green')
plot (seq_square, xlab="time", ylab ="p2 in population 2", type = "p", col = 'blue')
plot (seq_square_new, xlab="time", ylab ="p in population 1", type = "l", col = 'yellow')
```

## Example using binomial distribution {.flexbox .vcenter}

-   As above for the normal distribution, data can be generated by being sampled from nearly any distribution and then visualized.
-   Below I’m having you use the ‘histogram’ function. What does it do?

## Example using binomial distribution {.smaller}

-   10 successes (out of 20 trials) is the most frequent outcome

```{r binomial function, echo=TRUE}
heads <- rbinom(n=1000, size=20, prob=0.5)
hist(heads)
```

## Example using binomial distribution {.smaller}

-   This kind of statement can be run in one line as well, which is sometimes easier.

```{r binomial function again, echo=TRUE}
hist(rbinom(n=1000, size=20, prob=0.5))
```

## Creating Data Frames in R {.smaller}

-   As you have seen, in R you can generate your own random data set drawn from nearly any distribution very easily.
-   Often we will want to use collected data.
-   Now, let’s make a dummy dataset to get used to dealing with data frames
-   Set up three variables (hydrogel_concentration, compression and conductivity) as vectors

```{r, echo=TRUE}
hydrogel_concentration <- factor(c("low", "high", "high", "high", "medium", "medium", "medium","low"))
compression <- c(3.4, 3.4, 8.4, 3, 5.6, 8.1, 8.3, 4.5)
conductivity <- c(0, 9.2, 3.8, 5, 5.6, 4.1, 7.1, 5.3)
```

-   Create a data frame where vectors become columns

```{r, echo=TRUE}
mydata <- data.frame(hydrogel_concentration, compression, conductivity)
row.names(mydata) <- c("Sample_1", "Sample_2", "Sample_3", "Sample_4", 
                       "Sample_5", "Sample_6", "Sample_7", "Sample_8")
```

-   Now you have a hand-made data frame with row names
-   Take a look at it in the data section of RStudio

## Reading in Data Frames in R {.flexbox .vcenter}

-   A strength of `R` is being able to import data from an external source
-   Create the same table that you did above in a spreadsheet like Excel
-   Export it to comma separated and tab separated text files for importing into `R`.
-   The first will read in a comma-delimited file, whereas the second is a tab-delimited
-   In both cases the header and row.names arguments indicate that there is a header row and row label column
-   Note that the name of the file by itself will have R look in the CWD, whereas a full path can also be used

## Reading in Data Frames in R {.flexbox .vcenter}

```{r, eval = FALSE, echo = TRUE}
YourFile <- read.table('yourfile.csv', header=T, row.names=1, sep=',')
YourFile <- read.table('yourfile.txt', header=T, row.names=1, sep='\t')
```

## Exporting Data Frames in R {.flexbox .vcenter}

```{r, eval = FALSE, echo = TRUE}
write.table(YourFile, "yourfile.csv", quote=F, row.names=T, sep=",")
write.table(YourFile, "yourfile.txt", quote=F, row.names=T, sep="\t")
```

## Indexing in data frames {.flexbox .vcenter}

-   Next up - indexing just a subset of the data
-   This is a very important idea in R, that you can analyze just a subset of the data.
-   This is analyzing only the data in the file you made that has the factor value 'mixed'.

```{r, echo=TRUE, eval=FALSE}
print (YourFile[,2])
print (YourFile$temp)
print (YourFile[2,])
plot (YourFile$temp, YourFile$elevation)
```

## Indexing in data frames {.flexbox .vcenter}

-   You can perform operations on particular levels of a factor
-   Calculating the mean of the 'mixed' and 'gipps' levels of habitat.
-   Note that the first argument is the numerical column vector, and the second is the factor column vector.
-   The third is the operation. Reversing the first two does not work (the one below).

```{r, eval = FALSE, echo = TRUE}
tapply(YourFile$temp, YourFile$habitat, mean)
tapply(YourFile$temp, YourFile$habitat, var)
```

## R INTERLUDE \| Some real transcriptomic data {.flexbox .vcenter}

-   Examine the data file
-   How many many rows and columns are there?
-   How many different variables are there?
-   What are the general types of variables?
-   Now let’s read the data file into R and analyze it
-   This exercise will help you get used to reading in and manipulating genomic data files
-   First off, remember to set your working directory to find your file correctly

## Some real transcriptomic data {.smaller}

```{r, eval = FALSE, echo = TRUE}
RNAseq_Data <- read.table('<name_of_file>', header=TRUE, sep=',')

print (RNAseq_Data)
head (RNAseq_Data)
tail (RNAseq_Data)

print (RNAseq_Data[,2])
print (RNAseq_Data[1,])
print (RNAseq_Data[1,2])
print (RNAseq_Data$ENSGACG00000000010)
print (RNAseq_Data$ENSGACG00000000010>45.0)
```

## Summary stats and figures {.smaller}

```{r, eval = FALSE, echo = TRUE}
summary1 <- summary(RNAseq_Data $ENSGACG00000000003)
print (summary1)

hist(RNAseq_Data $ENSGACG00000000003)
boxplot(RNAseq_Data$ENSGACG00000000003)
boxplot(RNAseq_Data$ENSGACG00000000003~RNAseq_Data$Population)
plot(RNAseq_Data $ENSGACG00000000003, RNAseq_Data$ENSGACG00000000003)

boxplot(RNAseq_Data $ENSGACG00000000003~RNAseq_Data$Treatment, 
        col = "red", ylab = "Expression Level", xlab = "Treatment level", 
        border ="orange", 
        main = "Boxplot of variation in gene expression across microbiota treatments")
```
